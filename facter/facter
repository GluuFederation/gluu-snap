#!/usr/bin/env python3

import sys

if '--version' in sys.argv:
    print("3.10.0")
    sys.exit()

import os
import socket
import time
import json
import shutil
import socket
import struct
import fcntl
import struct

disk = os.environ.get('SNAP_COMMON', '/')

loadavg = os. getloadavg()
du=shutil.disk_usage(disk)
free_disk_space = round((du.free/du.total) * 100, 1)

swapsize = 0
swapfree = 0
memoryfree = 0
memorysize = 0

with open('/proc/meminfo') as f:
    for l in f:
        if l.startswith('SwapTotal'):
            swapsize = int(l.split(':')[1].split()[0]) / 1024.0
        elif l.startswith('SwapFree'):
            swapfree = int(l.split(':')[1].split()[0]) / 1024.0
        elif l.startswith('MemTotal'):
            memorysize = int(l.split(':')[1].split()[0]) / 1024.0
        elif l.startswith('MemFree'):
            memoryfree = int(l.split(':')[1].split()[0]) / 1024.0

with open('/proc/uptime') as f:
    uptime = int(float(f.read().strip().split()[0]))

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip_addr = s.getsockname()[0]
    
except:
    try:
        net_if_list = socket.if_nameindex()
        
        for netif in net_if_list[:]:
            if netif[0] == 'lo':
                net_if_list
        for netif in net_if_list:
            if netif[1].startswith('enp') or netif[1].startswith('eth'):
                iface = netif[1]
                break
        else:
            net_if_list.sort()
            iface = net_if_list[0][1]    
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sockfd = sock.fileno()
        SIOCGIFADDR = 0x8915
        ifreq = struct.pack(b'16sH14s', iface.encode(), socket.AF_INET, b'\x00'*14)
        res = fcntl.ioctl(sockfd, SIOCGIFADDR, ifreq) 
        ip = struct.unpack('16sH2x4s8x', res)[2]
        ip_addr = socket.inet_ntoa(ip)
    
    except:
        ip_addr = ''

try:
    hostname = socket.gethostbyaddr(ip_addr)[0]
except:
    try:
        hostname = socket.gethostname()
    except:
        hostname = ''


if '-j' in sys.argv:
    data = {
        'memoryfree' : '{:0.2f} MiB'.format(memoryfree),
        'memoryfree_mb': '{:0.3f}'.format(memoryfree),
        'memorysize_mb': '{:0.2f}'.format(memorysize),
        'swapfree':  '{:0.2f} GiB'.format(swapfree),
        'swapsize': '{:0.2f} GiB'.format(swapsize),
        'hostname': hostname,
        'ipaddress':ip_addr,
        'uptime_seconds': uptime,
        'free_disk_space': free_disk_space,
        'load_averages':{
              '1m': loadavg[0],
              '5m': loadavg[1],
              '15m': loadavg[2],
            }
        }


    print(json.dumps(data, indent=2))

else:

    data = '''memoryfree => {0:0.2f} MiB
memoryfree_mb => {0:0.3f}
memorysize_mb => {1:0.2f}
swapfree => {2:0.2f} GiB
swapsize => {3:0.2f} GiB
hostname => {4}
ipaddress => {5}
uptime_seconds => {6}
free_disk_space => {7:0.1f}
load_averages => {{
  15m => {8},
  1m => {9},
  5m => {10}
}}

'''.format(
    memoryfree,
    memorysize,
    swapfree,
    swapsize,
    hostname,
    ip_addr,
    uptime,
    free_disk_space,
    loadavg[2],
    loadavg[0],
    loadavg[1],
)


    print(data)
